* Encoding
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
#+END_SRC

* Packages
** Melpa Initialization
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(package-initialize)
#+END_SRC

** Auto-Download Use-Package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

** Which Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC

** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC

** Browse Kill Ring
#+BEGIN_SRC emacs-lisp
  (use-package browse-kill-ring
    :ensure t
    :config
    (browse-kill-ring-default-keybindings))
#+END_SRC

* Theme
** Custom Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)
    (doom-themes-org-config))
  
  (custom-set-faces
   '(avy-lead-face      ((t (:background "#293235" :foreground "#67b11d"))))
   '(avy-lead-face-0    ((t (:background "#293235" :foreground "#b1951d"))))
   '(avy-lead-face-1    ((t (:background "#293235" :foreground "#a31db1"))))
   '(avy-lead-face-2    ((t (:background "#293235" :foreground "#4f97d7")))))
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'windows-nt)
      (add-to-list 'default-frame-alist '(font . "Consolas-12.5")))
  (if (eq system-type 'darwin)
      (add-to-list 'default-frame-alist '(font . "Liberation Mono-14.5")))
#+END_SRC

** Colors for Comments
#+BEGIN_SRC emacs-lisp
  (setq fixme-modes '(c++-mode c-mode emacs-lisp-mode))
  (make-face 'font-lock-fixme-face)
  (make-face 'font-lock-note-face)
  (mapc (lambda (mode)
	  (font-lock-add-keywords
	   mode
	   '(("\\<\\(TODO\\)" 1 'font-lock-fixme-face t)
	     ("\\<\\(NOTE\\)" 1 'font-lock-note-face t))))
	fixme-modes)
  (modify-face 'font-lock-fixme-face "firebrick2" nil nil t nil t nil nil)
  (modify-face 'font-lock-note-face "lime green" nil nil t nil t nil nil)
#+END_SRC

* Basic Settings
** Paren Mode
#+BEGIN_SRC emacs-lisp
(setq show-paren-mode 1)
#+END_SRC

** Disable Yes or No Prompts
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Start Fullscreen
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Scroll Line by Line
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC

** Remove Bell Sound
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** No Line Truncation
#+BEGIN_SRC emacs-lisp
(setq-default truncate-lines t)
#+END_SRC

** No Backup + Autosave
#+BEGIN_SRC emacs-lisp
(setq backup-inhibited t) 
(setq auto-save-default nil)
(setq create-lockfiles nil)
#+END_SRC

** Mac OSX Settings
#+BEGIN_SRC emacs-lisp 
  (if (eq system-type 'darwin)
      (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'super))
#+END_SRC

** Remove Scroll Bar, Menu Bar, Tool Bar, Startup Screen
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1) (menu-bar-mode -1) (tool-bar-mode 0)
#+END_SRC

** Subword
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC

** Transient Mark Mode Off
#+BEGIN_SRC emacs-lisp
(transient-mark-mode -1)
#+END_SRC

* Terminal
** Keybinding 
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<M-return>") 'eshell)
#+END_SRC

** Fixing Emacs Shell Clear Function
#+BEGIN_SRC emacs-lisp
  (defun rohan-eshell-clear ()
    "clear the eshell buffer"
    (interactive)
    (let ((inhibit-read-only t)) (erase-buffer)))

  (advice-add 'eshell/clear :override
	      'rohan-eshell-clear)
#+END_SRC

** Removing Greeting Message in Emacs Shell
#+BEGIN_SRC emacs-lisp
(setq eshell-banner-message "Welcome to Your Shell, Rohan\n")
#+END_SRC

** Changing Prompt Colors in Emacs Shell
#+BEGIN_SRC emacs-lisp
  (setq eshell-prompt-function
	(lambda () (concat
		    "\n"
		    (propertize "┌─["
				'face `(:foreground "green"))
		    (propertize (user-login-name)
				'face `(:foreground "DarkGoldenrod3"))
		    (propertize "]──["
				'face `(:foreground "green"))
		    (propertize (format-time-string "%H:%M" (current-time))
				'face `(:foreground "olive drab"))
		    (propertize "]──["
				'face `(:foreground "green"))
		    (propertize (concat (abbreviate-file-name(eshell/pwd))) 'face `(:foreground "white"))
		    (propertize "]\n"
				'face `(:foreground "green"))
		    (propertize "└─>"
				'face `(:foreground "green"))
		    (propertize (if (= (user-uid) 0) " # " " $ ")
				'face `(:foreground "green")))))

#+END_SRC

* IDO
** Enable IDO Mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

** Disable File Search
#+BEGIN_SRC emacs-lisp
  (setq ido-auto-merge-work-directories-length -1)
#+END_SRC

** IDO Vertical 
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

** SMEX
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init
    (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC

** IDO for I-Menu
#+BEGIN_SRC emacs-lisp
  (defun ido-goto-symbol (&optional symbol-list)
    "refresh imenu and jump to a place in the buffer using Ido."
    (interactive)
    (unless (featurep 'imenu)
      (require 'imenu nil t))
    (cond
     ((not symbol-list)
      (let ((ido-mode ido-mode)
	    (ido-enable-flex-matching
	     (if (boundp 'ido-enable-flex-matching)
		 ido-enable-flex-matching t))
	    name-and-pos symbol-names position)
	(unless ido-mode
	  (ido-mode 1)
	  (setq ido-enable-flex-matching t))
	(while (progn
		 (imenu--cleanup)
		 (setq imenu--index-alist nil)
		 (ido-goto-symbol (imenu--make-index-alist))
		 (setq selected-symbol
		       (ido-completing-read "Symbol? " symbol-names))
		 (string= (car imenu--rescan-item) selected-symbol)))
	(push-mark nil t nil)
	(setq position (cdr (assoc selected-symbol name-and-pos)))
	(cond
	 ((overlayp position)
	  (goto-char (overlay-start position)))
	 (t
	  (goto-char position)))))
     ((listp symbol-list)
      (dolist (symbol symbol-list)
	(let (name position)
	  (cond
	   ((and (listp symbol) (imenu--subalist-p symbol))
	    (ido-goto-symbol symbol))
	   ((listp symbol)
	    (setq name (car symbol))
	    (setq position (cdr symbol)))
	   ((stringp symbol)
	    (setq name symbol)
	    (setq position
		  (get-text-property 1 'org-imenu-marker symbol))))
	  (unless (or (null position) (null name)
		      (string= (car imenu--rescan-item) name))
	    (add-to-list 'symbol-names name)
	    (add-to-list 'name-and-pos (cons name position))))))))

  (global-set-key (kbd "M-j") 'ido-goto-symbol)
#+END_SRC

** Switch Buffer Keybind
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC

* Buffers
** Enable I-Buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC

** I-Buffer Expert
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC

* Window Splitting
** Split Horizontally
#+BEGIN_SRC emacs-lisp
(setq split-height-threshold nil)
(setq split-width-threshold 100)
#+END_SRC

* Open/Reload Config
** Open Config
#+BEGIN_SRC emacs-lisp
  (defun config-edit ()
    (interactive)
    (find-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c e") 'config-edit)

(defun config-edit-other-window ()
    (interactive)
    (find-file-other-window (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c E") 'config-edit-other-window)
#+END_SRC

** Reload Config
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file
     (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

* Org
** Source Snippet
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC\n"))
#+END_SRC

* Find File/Buffer + Kill
** Find File and Buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x F") 'find-file-other-window)
  (global-set-key (kbd "C-x B") 'ido-switch-buffer-other-window)
#+END_SRC

** Kill
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-k") 'kill-this-buffer)

(defun other-window-kill-buffer ()
  (interactive)
  (let ((win-curr (selected-window))
        (win-other (next-window)))
    (select-window win-other)
    (kill-this-buffer)
    (select-window win-curr)))

(global-set-key (kbd "C-x K") 'other-window-kill-buffer)
#+END_SRC

* Convenient Function
** Kill Line
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c k") 'kill-whole-line)
#+END_SRC

** Copy Line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (kill-new
     (buffer-substring
      (point-at-bol)
      (point-at-eol))))
  (global-set-key (kbd "C-c l") 'copy-whole-line)
#+END_SRC

** Join Line
#+BEGIN_SRC emacs-lisp
  (defun rohan-join-line ()
    (interactive)
    (let ((inhibit-message t))
      (save-excursion
	(next-line)
	(join-line))
      (indent-region (line-beginning-position) (line-end-position))))

  (global-set-key (kbd "C-c j") 'rohan-join-line)
#+END_SRC

** Grep
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'windows-nt)
      (set-variable 'grep-command "findstr -s -n -i -l "))


  (defun grep-under-cursor ()
    (interactive)
    (let* ((cur-word (thing-at-point 'word))
	   (cmd (concat "findstr -s -n -i -l " cur-word " *.c *.h *.cpp")))
      (grep cmd)))

  (defun grep-function (function_name)
    (interactive "sFunction to Grep: ")
    (let ((cmd (concat "findstr -s -n -i -l " function_name "( " 
		       "*.c *.h *.cpp")))
      (grep cmd)))
#+END_SRC

** Query Replace
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-r") 'query-replace)
#+END_SRC

** Replace in Region
#+BEGIN_SRC emacs-lisp
  (defun rohan-replace-in-region (old-word new-word)
    "perform a replace-string in the current region."
    (interactive "sReplace: \nsReplace: %s With: ")
    (save-excursion (save-restriction
		      (narrow-to-region (mark) (point))
		      (beginning-of-buffer)
		      (replace-string old-word new-word))))
  (global-set-key (kbd "M-R") 'rohan-replace-in-region)
#+END_SRC

** Comment/Uncomment
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-;") 'comment-or-uncomment-region)
#+END_SRC

** Jump To Empty Line
#+BEGIN_SRC emacs-lisp
  (defun previous-blank-line ()
    "moves to the previous line containing nothing but whitespace."
    (interactive)
    (if (eq (search-backward-regexp "^[ \t]*\n" nil t) nil)
	(forward-line -1)))
    
  (defun next-blank-line ()
    "moves to the next line containing nothing but whitespace."
    (interactive)
    (forward-line)
    (if (eq (search-forward-regexp "^[ \t]*\n" nil t) nil)
	(forward-line))
    (forward-line -1))

  (global-set-key (kbd "M-p") 'previous-blank-line)
  (global-set-key (kbd "M-n") 'next-blank-line)
#+END_SRC

** Mark Navigation
#+BEGIN_SRC emacs-lisp
  ;; pop mark
  (global-set-key (kbd "C-'") (kbd "C-u C-SPC"))
  ;; exchange point and mark
  (global-set-key (kbd "M-'") 'exchange-point-and-mark)
#+END_SRC

** Zap Up to Char
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-z") 'zap-up-to-char)
#+END_SRC

** Move Line Up/Down
#+BEGIN_SRC emacs-lisp
  (defun move-line-up ()
    "Move up the current line."
    (interactive)
    (transpose-lines 1)
    (forward-line -2)
    (indent-according-to-mode))

  (defun move-line-down ()
    "Move down the current line."
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1)
    (indent-according-to-mode))

  (global-set-key [(control shift p)]  'move-line-up)
  (global-set-key [(control shift n)]  'move-line-down)
#+END_SRC

* Abbrev
#+BEGIN_SRC emacs-lisp
  (setq dabbrev-case-replace t)
  (setq dabbrev-case-fold-search t)
  (setq dabbrev-upcase-means-case-search t)

  (define-key global-map "\t" 'dabbrev-expand)
  (define-key minibuffer-local-map "\t" 'dabbrev-expand)
  (define-key global-map [S-tab] 'indent-for-tab-command)
  (define-key global-map [C-tab] 'indent-region)
#+END_SRC

* Modeline
** Spaceline
#+BEGIN_SRC emacs-lisp
    (use-package spaceline
      :ensure t
      :config
      (require 'spaceline-config)
      (if (eq system-type 'darwin)
	  (setq powerline-image-apple-rgb t))
      (spaceline-spacemacs-theme)
      (spaceline-toggle-minor-modes-off)
      (spaceline-toggle-selection-info-off)
      (add-hook 'window-setup-hook (lambda () (powerline-reset))))
#+END_SRC

** Get Rid of VC
#+BEGIN_SRC emacs-lisp
(setq vc-handled-backends nil)
#+END_SRC

** Colored & Shortened VC
#+BEGIN_SRC emacs-lisp
  (make-face 'vc-green)
  (modify-face 'vc-green "light green" nil nil nil nil nil nil nil)

  (make-face 'vc-red)
  (modify-face 'vc-red "Red" nil nil nil nil nil nil nil)

  (make-face 'vc-yellow)
  (modify-face 'vc-yellow "Yellow" nil nil nil nil nil nil nil)

  (eval-after-load "vc-hooks"
    '(defadvice vc-mode-line (after sml/after-vc-mode-line-advice () activate)
       (when (stringp vc-mode)
	 (let ((noback (replace-regexp-in-string (format "^ %s" (vc-backend buffer-file-name)) " " vc-mode)))
	   (setq vc-mode
		 (propertize noback
			     'face (cond ((string-match "^ -" noback)    'vc-green)
					 ((string-match "^ [:@]" noback) 'vc-yellow)
					 ((string-match "^ [!\\?]" noback) 'vc-red))))))))
#+END_SRC

** Get Rid of Extra C++ Modeline Stuff
#+BEGIN_SRC emacs-lisp
(with-eval-after-load "cc-cmds"
  (defalias 'c-update-modeline #'ignore))
#+END_SRC

* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 5)))
    (setq dashboard-banner-logo-title "Welcome Rohan!"))
#+END_SRC

* Compilation
** Continuation Lines Enable
#+BEGIN_SRC emacs-lisp
  (defun rohan-compilation-hook ()
    (make-local-variable 'truncate-lines)
    (setq truncate-lines nil))
  (add-hook 'compilation-mode-hook 'rohan-compilation-hook)
#+END_SRC

** Set Build Script
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'darwin)
      (setq build-file "./compile"))
  (if (eq system-type 'windows-nt)
      (setq build-file "build.bat"))
#+END_SRC

** Compilation
#+BEGIN_SRC emacs-lisp
  (defun find-project-directory ()
    "recursively search for a makefile."
    (interactive)
    (if (file-exists-p build-file) t
      (cd "../")))

  (defun make-without-asking ()
    "make the current build."
    (interactive)
    (let ((original-dir default-directory))
      (if (find-project-directory)
	  (progn
	    (compile build-file)
	    (cd original-dir)))))

  (global-set-key (kbd "C-c c") 'make-without-asking)
  (global-set-key (kbd "M-<down>") 'make-without-asking)
  (global-set-key (kbd "M-<right>") 'next-error)
  (global-set-key (kbd "M-<left>") 'previous-error)
  (global-set-key (kbd "M-<up>") 'first-error)
#+END_SRC

* C++
** File Extension
#+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist
	(append '(("\\.h$" . c++-mode) ("\\.hlsl$" . c++-mode) ("\\.glsl$" . c++-mode))
		auto-mode-alist))
#+END_SRC

** C Style
#+BEGIN_SRC emacs-lisp
  (defconst rohan-c-style
    '((c-electric-pound-behavior   . 'alignleft)
      (c-tab-always-indent         . t)
      (c-comment-only-line-offset  . 0)
      (c-hanging-braces-alist      . ((class-open)
				      (class-close)
				      (defun-open)
				      (defun-close)
				      (inline-open)
				      (inline-close)
				      (brace-list-open)
				      (brace-list-close)
				      (brace-list-intro)
				      (brace-list-entry)
				      (block-open)
				      (block-close)
				      (substatement-open)
				      (statement-case-open)
				      (class-open)))
      (c-hanging-colons-alist      . ((inher-intro)
				      (case-label)
				      (label)
				      (access-label)
				      (access-key)
				      (member-init-intro)))
      (c-cleanup-list              . (scope-operator
				      list-close-comma
				      defun-close-semi))
      (c-offsets-alist             . ((arglist-close         .  c-lineup-arglist)
				      (label                 . -4)
				      (access-label          . -4)
				      (cpp-define-intro      .  0)
				      (substatement-open     .  0)
				      (statement-case-intro  .  4)
				      (statement-cont        .  4)
				      (case-label            .  4)
				      (block-open            .  0)
				      (inline-open           .  0)
				      (topmost-intro-cont    .  0)
				      (func-decl-cont        .  0)
				      (knr-argdecl-intro     . -4)
				      (brace-list-open       .  4)
				      (brace-list-intro      .  4)))
      (c-echo-syntactic-information-p . t)) "Rohan's C Style")
#+END_SRC

** Hack for List Initialization
#+BEGIN_SRC emacs-lisp
  (defun un-indent-by-removing-4-spaces ()
    "remove 4 spaces from beginning of of line"
    (interactive)
    (save-excursion
      (beginning-of-line)
      (delete-char 4)))

  (defadvice c-indent-line (after c-indent-line-after-hack activate)
    "workaround C indent issue."
    (when (or (eq major-mode 'c++-mode)
	      (eq major-mode 'c-mode))
      (let ((cur-line (buffer-substring-no-properties
		       (line-beginning-position)
		       (line-end-position)))
	    (guess-syntax (caar (c-guess-basic-syntax))))
	(when (and (string-match "^\\( +\\)\{ *$" cur-line)
		   (or (eq guess-syntax 'statement-cont)
		       (eq guess-syntax 'brace-list-open))
		   (un-indent-by-removing-4-spaces))))))
#+END_SRC

** C Hook
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook (lambda () (c-toggle-comment-style -1)))

  (defun rohan-c-hook ()
    (c-add-style "Rohan-C-Style" rohan-c-style t)

    (setq tab-width 4
	  indent-tabs-mode nil)

    (c-set-offset 'member-init-intro '+)
    (c-toggle-auto-hungry-state -1)

					  ; newline indents, semi-colon doesn't
    (define-key c++-mode-map "\C-m" 'newline-and-indent)
    (setq c-hanging-semi&comma-criteria '((lambda () 'stop)))

    (defun rohan-header-format ()
      "format the given file as a header file."
      (interactive)
      (setq BaseFileName (file-name-sans-extension (file-name-nondirectory buffer-file-name)))
      (save-excursion
	(insert "#if !defined(")
	(push-mark)
	(insert BaseFileName)
	(upcase-region (mark) (point))
	(pop-mark)
	(insert "_H)\n")
	(insert "\n")
	(insert "#define ")
	(push-mark)
	(insert BaseFileName)
	(upcase-region (mark) (point))
	(pop-mark)
	(insert "_H\n")
	(insert "#endif")))
    (cond ((file-exists-p buffer-file-name) t)
	  ((string-match "[.]h" buffer-file-name) (rohan-header-format)))

    (defun rohan-find-corresponding-file ()
      "find the file that corresponds to this one."
      (interactive)
      (setq CorrespondingFileName nil)
      (setq BaseFileName (file-name-sans-extension buffer-file-name))
      (if (string-match "\\.h" buffer-file-name)
	  (setq CorrespondingFileName (concat BaseFileName ".cpp")))
      (if (string-match "\\.cpp" buffer-file-name)
	  (setq CorrespondingFileName (concat BaseFileName ".h")))
      (if CorrespondingFileName (find-file CorrespondingFileName)
	(error "unable to find a corresponding file")))  
    (defun rohan-find-corresponding-file-other-window ()
      "find the file that corresponds to this one."
      (interactive)
      (find-file-other-window buffer-file-name)
      (rohan-find-corresponding-file)
      (other-window -1))

    (define-key c++-mode-map (kbd "C-c h") 'rohan-find-corresponding-file)
    (define-key c++-mode-map (kbd "C-c H") 'rohan-find-corresponding-file-other-window)

    (setq-default fill-column 78)
    (define-key c++-mode-map "\e." 'c-fill-paragraph))

  (add-hook 'c-mode-common-hook 'rohan-c-hook)
#+END_SRC
