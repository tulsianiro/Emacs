* Encoding
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
#+END_SRC

* Packages
** Melpa Initialization
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(package-initialize)
#+END_SRC

** Auto-Download Use-Package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

** Which Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC

** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC

* Theme
** Auto-Download + Load Spacemacs
#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :ensure t
    :defer  t
    :init
    (load-theme 'monokai t))
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Source Code Pro-12.5"))
#+END_SRC

* Basic Settings
** Disable Yes or No Prompts
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Start Fullscreen
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Scroll Line by Line
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC

** Remove Bell Sound
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** Highlight Current Line
#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode t))
#+END_SRC

** No Line Truncation
#+BEGIN_SRC emacs-lisp
(setq-default truncate-lines t)
#+END_SRC

** No Backup + Autosave
#+BEGIN_SRC emacs-lisp
(setq backup-inhibited t) 
(setq auto-save-default nil)
#+END_SRC

** Mac OSX Settings
#+BEGIN_SRC emacs-lisp 
  (if (eq system-type 'darwin)
      (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'super))
#+END_SRC

** Remove Scroll Bar, Menu Bar, Tool Bar, Startup Screen
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1) (menu-bar-mode -1) (tool-bar-mode 0)
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
#+END_SRC

** Subword
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC

* Terminal
** Keybinding 
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<M-return>") 'eshell)
#+END_SRC

** Fixing Emacs Shell Clear Function
#+BEGIN_SRC emacs-lisp
  (defun rohan-eshell-clear ()
    "clear the eshell buffer"
    (interactive)
    (let ((inhibit-read-only t)) (erase-buffer)))

  (advice-add 'eshell/clear :override
	      'rohan-eshell-clear)
#+END_SRC

** Removing Greeting Message in Emacs Shell
#+BEGIN_SRC emacs-lisp
(setq eshell-banner-message "")
#+END_SRC

** Changing Prompt Colors in Emacs Shell
#+BEGIN_SRC emacs-lisp
  (setq eshell-prompt-function
	(lambda nil (concat
		     (propertize (abbreviate-file-name(eshell/pwd))
				 'face `(:weight bold :foreground "#ce537a"))
		     (propertize " $ "
				 'face `(:foreground "#b2b2b2")))))
  (setq eshell-highlight-prompt nil)
#+END_SRC

* IDO
** Enable IDO Mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

** IDO Vertical 
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

** SMEX
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init
    (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC

** IDO for I-Menu
#+BEGIN_SRC emacs-lisp
  (defun ido-goto-symbol (&optional symbol-list)
    "Refresh imenu and jump to a place in the buffer using Ido."
    (interactive)
    (unless (featurep 'imenu)
      (require 'imenu nil t))
    (cond
     ((not symbol-list)
      (let ((ido-mode ido-mode)
	    (ido-enable-flex-matching
	     (if (boundp 'ido-enable-flex-matching)
		 ido-enable-flex-matching t))
	    name-and-pos symbol-names position)
	(unless ido-mode
	  (ido-mode 1)
	  (setq ido-enable-flex-matching t))
	(while (progn
		 (imenu--cleanup)
		 (setq imenu--index-alist nil)
		 (ido-goto-symbol (imenu--make-index-alist))
		 (setq selected-symbol
		       (ido-completing-read "Symbol? " symbol-names))
		 (string= (car imenu--rescan-item) selected-symbol)))
	(unless (and (boundp 'mark-active) mark-active)
	  (push-mark nil t nil))
	(setq position (cdr (assoc selected-symbol name-and-pos)))
	(cond
	 ((overlayp position)
	  (goto-char (overlay-start position)))
	 (t
	  (goto-char position)))))
     ((listp symbol-list)
      (dolist (symbol symbol-list)
	(let (name position)
	  (cond
	   ((and (listp symbol) (imenu--subalist-p symbol))
	    (ido-goto-symbol symbol))
	   ((listp symbol)
	    (setq name (car symbol))
	    (setq position (cdr symbol)))
	   ((stringp symbol)
	    (setq name symbol)
	    (setq position
		  (get-text-property 1 'org-imenu-marker symbol))))
	  (unless (or (null position) (null name)
		      (string= (car imenu--rescan-item) name))
	    (add-to-list 'symbol-names name)
	    (add-to-list 'name-and-pos (cons name position))))))))

  (global-set-key (kbd "M-j") 'ido-goto-symbol)
#+END_SRC

** Switch Buffer Keybind
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC

* Buffers
** Enable I-Buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC

** I-Buffer Expert
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC

* Window Splitting
** Split Horizontally
#+BEGIN_SRC emacs-lisp
(setq split-height-threshold nil)
(setq split-width-threshold 100)
#+END_SRC

* Open/Reload Config
** Open Config
#+BEGIN_SRC emacs-lisp
  (defun config-edit ()
    (interactive)
    (find-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c e") 'config-edit)

(defun config-edit-other-window ()
    (interactive)
    (find-file-other-window (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c E") 'config-edit-other-window)
#+END_SRC

** Reload Config
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file
     (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

* Org
** Org Bullets
#+BEGIN_SRC emacs-lisp
  (set-fontset-font t 'unicode "DejaVu Sans Mono" nil 'prepend)

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

* Find File/Buffer + Kill
** Find File and Buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x F") 'find-file-other-window)
  (global-set-key (kbd "C-x B") 'ido-switch-buffer-other-window)
#+END_SRC

** Kill
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-k") 'kill-this-buffer)

(defun other-window-kill-buffer ()
  (interactive)
  (let ((win-curr (selected-window))
        (win-other (next-window)))
    (select-window win-other)
    (kill-this-buffer)
    (select-window win-curr)))

(global-set-key (kbd "C-x K") 'other-window-kill-buffer)
#+END_SRC

* Convenient Function
** Kill Whole Word
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w") 'kill-whole-word)
#+END_SRC

** Copy Line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (kill-new
     (buffer-substring
      (point-at-bol)
      (point-at-eol))))
  (global-set-key (kbd "C-c l") 'copy-whole-line)
#+END_SRC

** Join Line
#+BEGIN_SRC emacs-lisp
  (defun rohan-join-line ()
    (interactive)
    (save-excursion
      (next-line)
      (join-line)))
  (global-set-key (kbd "C-c j") 'rohan-join-line)
#+END_SRC

* Abbrev
#+BEGIN_SRC emacs-lisp
  (setq dabbrev-case-replace t)
  (setq dabbrev-case-fold-search t)
  (setq dabbrev-upcase-means-case-search t)

  (define-key global-map "\t" 'dabbrev-expand)
  (define-key global-map [S-tab] 'indent-for-tab-command)
#+END_SRC

* Modeline
** Spaceline
#+BEGIN_SRC emacs-lisp
    (use-package spaceline
      :ensure t
      :config
      (require 'spaceline-config)
      (if (eq system-type 'darwin)
	  (setq powerline-image-apple-rgb t))
      (spaceline-spacemacs-theme)
      (spaceline-toggle-minor-modes-off))
#+END_SRC

** Colored & Shortened VC
#+BEGIN_SRC emacs-lisp
  (make-face 'vc-green)
  (modify-face 'vc-green "light green" nil nil nil nil nil nil nil)

  (make-face 'vc-red)
  (modify-face 'vc-red "Red" nil nil nil nil nil nil nil)

  (make-face 'vc-yellow)
  (modify-face 'vc-yellow "Yellow" nil nil nil nil nil nil nil)

  (eval-after-load "vc-hooks"
    '(defadvice vc-mode-line (after sml/after-vc-mode-line-advice () activate)
       (when (stringp vc-mode)
	 (let ((noback (replace-regexp-in-string (format "^ %s" (vc-backend buffer-file-name)) " " vc-mode)))
	   (setq vc-mode
		 (propertize noback
			     'face (cond ((string-match "^ -" noback)    'vc-green)
					 ((string-match "^ [:@]" noback) 'vc-yellow)
					 ((string-match "^ [!\\?]" noback) 'vc-red))))))))
#+END_SRC

** Get Rid of Extra C++ Modeline Stuff
#+BEGIN_SRC emacs-lisp
(with-eval-after-load "cc-cmds"
  (defalias 'c-update-modeline #'ignore))
#+END_SRC

